import json
import os
from urllib import parse
from pathlib import Path

from global_config import RAW_DATA_DIR
from utils.logging import get_logger
from utils.sql import get_cursor


STATIONS_DATA = os.path.join(RAW_DATA_DIR, "osm", "stations.json")
log = get_logger("osm-stations")

query = """/*
This has been generated by the overpass-turbo wizard.
The original search was:
“public_transport=station”
*/
[out:json][timeout:600];
// gather results
(
  // query part for: “public_transport=station”
  node["railway"="station"](50.00773901463687,-44.2529296875,60.823494332539646,2.109375);
);
// print results
out body;
>;
out skel qt;"""


# Downloaded as JSON from http://overpass-turbo.eu/
if not os.path.exists(STATIONS_DATA):
    log.info(f"Station data doesn't exist, obtaining it from {STATIONS_DATA}, {parse.quote_plus(query, safe='*()')}")
    Path(os.path.join(RAW_DATA_DIR, "osm")).mkdir(parents=True, exist_ok=True)
    os.system(
        f"curl 'http://overpass-api.de/api/interpreter' \
          -H 'Connection: keep-alive' \
          -H 'Pragma: no-cache' \
          -H 'Cache-Control: no-cache' \
          -H 'Accept: */*' \
          -H 'User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36' \
          -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
          -H 'Origin: http://overpass-turbo.eu' \
          -H 'Referer: http://overpass-turbo.eu/' \
          -H 'Accept-Language: en-GB,en-US;q=0.9,en;q=0.8' \
          --data-raw 'data={parse.quote_plus(query, safe='*()')}' \
          --compressed \
          --insecure \
        -o {STATIONS_DATA}"
    )


"""
[out:json][timeout:600];
// gather results
(
  // query part for: “public_transport=station”
  node["public_transport"="station"]({{bbox}});
  way["public_transport"="station"]({{bbox}});
  relation["public_transport"="station"]({{bbox}});
);
// print results
out body;
>;
out skel qt;
"""


with open(STATIONS_DATA) as jsonfile:
    cur = get_cursor()
    cur.execute("DELETE FROM metadata.stations")
    raw_json = json.load(jsonfile)
    log.info(f"Loaded {len(raw_json['elements'])} elements to process")
    records_processed = 0
    for element in raw_json["elements"]:
        if "tags" not in element:
            continue
        try:
            if "name" not in element["tags"] or "network" not in element["tags"]:
                continue
            if element["type"] == "node":
                log.debug(f"Found {element['tags']['name']}, {element['tags']['network'] or 'unknown network'}")
                cur.execute(
                    "INSERT INTO metadata.stations (name, network, location) VALUES "
                    "(%s, %s, ST_SetSRID( ST_Point(%s, %s), 4326))",
                    (element["tags"]["name"], element["tags"]["network"].split(";"), element["lon"], element["lat"]),
                )
        except KeyError as e:
            log.exception(f"got exception when parsing {json.dumps(element)}", e)

        records_processed += 1
        if records_processed % 10000 == 0:
            cur.connection.commit()
            log.info(f"Ingested {records_processed} stations")
    cur.connection.commit()
    log.info(f"Done! Read in {records_processed} stations")
